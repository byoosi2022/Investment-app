[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Investment App",
  "enabled": 0,
  "modified": "2024-09-01 18:00:58.310629",
  "module": "Loan and Investment App",
  "name": "Jounal",
  "script": "frappe.ui.form.on('Investment App', {\r\n    before_save: function(frm) {\r\n        frappe.call({\r\n            method: 'loan_investment_app.loan_and_investment_app.doctype.investment_app.investment_app.on_update',\r\n            args: {\r\n                // Pass any required arguments if needed\r\n            },\r\n            callback: function(response) {\r\n                if (response.message) {\r\n                    // Handle success response\r\n                    frappe.msgprint(response.message);\r\n                    console.log(response.name); // Journal Entry document name\r\n                } else if (response.error) {\r\n                    // Handle error response\r\n                    frappe.msgprint(response.error);\r\n                    console.error(response.error);\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Investment App",
  "enabled": 1,
  "modified": "2024-09-18 14:13:08.140243",
  "module": "Loan and Investment App",
  "name": "Uupdate Member",
  "script": "frappe.ui.form.on('Investment App', {\r\n    validate: function(frm) {\r\n        // Fetch Member document only if Transaction Type is 'Request for Payments'\r\n        if (frm.doc.party && frm.doc.transaction_type === 'Request for Payments') {\r\n            // Fetch the Member document\r\n            frappe.call({\r\n                method: 'frappe.client.get',\r\n                args: {\r\n                    doctype: 'Member',\r\n                    name: frm.doc.party  // Assuming party is the name of Member \r\n                },\r\n                callback: function(response) {\r\n                    var member = response.message;\r\n                    if (member) {\r\n                        var memberNeedsUpdate = false;  // Flag to track if Member needs updating\r\n\r\n                        // Check if the fields in Investment App are missing and fetch from Member if they are\r\n                        if (!frm.doc.investor_bank_name && member.custom_investor_bank_name) {\r\n                            frm.set_value('investor_bank_name', member.custom_investor_bank_name);\r\n                        }\r\n                        if (!frm.doc.investor_account_number && member.custom_investor_account_number) {\r\n                            frm.set_value('investor_account_number', member.custom_investor_account_number);\r\n                        }\r\n                        if (!frm.doc.investor_account_name && member.custom_investor_account_name) {\r\n                            frm.set_value('investor_account_name', member.custom_investor_account_name);\r\n                        }\r\n                        if (!frm.doc.adress && member.custom_resident) {\r\n                            frm.set_value('adress', member.custom_resident);\r\n                        }\r\n\r\n                        // If the fields in the Member document are not set, update Member with values from Investment App\r\n                        if (!member.custom_investor_bank_name || \r\n                            !member.custom_investor_account_number || \r\n                            !member.custom_investor_account_name || \r\n                            !member.custom_resident) {\r\n                            \r\n                            memberNeedsUpdate = true;  // Mark that Member needs an update\r\n\r\n                            frappe.call({\r\n                                method: 'frappe.client.set_value',\r\n                                args: {\r\n                                    doctype: 'Member',\r\n                                    name: member.name,\r\n                                    fieldname: {\r\n                                        'custom_investor_bank_name': frm.doc.investor_bank_name,\r\n                                        'custom_investor_account_number': frm.doc.investor_account_number,\r\n                                        'custom_investor_account_name': frm.doc.investor_account_name,\r\n                                        'custom_resident': frm.doc.adress\r\n                                    }\r\n                                },\r\n                                callback: function(r) {\r\n                                    if (!r.exc) {\r\n                                        frappe.msgprint(__('Member details updated successfully!'));\r\n                                    }\r\n                                    // Allow the form to be saved after Member is updated\r\n                                    frappe.validated = true;\r\n                                    frm.save();  // Manually trigger save after the update\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        // If no update is needed, allow the form to save\r\n                        if (!memberNeedsUpdate) {\r\n                            frappe.validated = true;  // Allow the form to be saved immediately\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            // Prevent saving the Investment App until the callback is complete\r\n            frappe.validated = false;  // This will prevent the form from being saved until we explicitly set it to true\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Investment App",
  "enabled": 0,
  "modified": "2024-09-18 13:29:40.575279",
  "module": "Loan and Investment App",
  "name": "Update Member",
  "script": "frappe.ui.form.on('Investment App', {\r\n    validate: function(frm) {\r\n        // Fetch Member document only if Transaction Type is 'Request Payment'\r\n        if (frm.doc.party && frm.doc.transaction_type === 'Request Payment') {\r\n            frappe.call({\r\n                method: 'frappe.client.get',\r\n                args: {\r\n                    doctype: 'Member',\r\n                    name: frm.doc.party  // Assuming party is the name of Member\r\n                },\r\n                callback: function(response) {\r\n                    var member = response.message;\r\n                    if (member) {\r\n                        // Check if the fields are not already set\r\n                        if (!member.custom_investor_bank_name || \r\n                            !member.custom_investor_account_number || \r\n                            !member.custom_investor_account_name) {\r\n                            \r\n                            // Update the Member document with the new values\r\n                            frappe.call({\r\n                                method: 'frappe.client.set_value',\r\n                                args: {\r\n                                    doctype: 'Member',\r\n                                    name: member.name,\r\n                                    fieldname: {\r\n                                        'custom_investor_bank_name': frm.doc.investor_bank_name,\r\n                                        'custom_investor_account_number': frm.doc.investor_account_number,\r\n                                        'custom_investor_account_name': frm.doc.investor_account_name\r\n                                    }\r\n                                },\r\n                                callback: function(r) {\r\n                                    if (!r.exc) {\r\n                                        frappe.msgprint(__('Member details updated successfully!'));\r\n                                    }\r\n                                }\r\n                            });\r\n                        } else {\r\n                            // Prevent saving the Investment App\r\n                            // frappe.msgprint(__('Member details are already updated. The Investment App cannot be saved.'));\r\n                            // frm.cancel();\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            // Prevent saving the Investment App until the callback is complete\r\n            frappe.validated = false; // Prevent form submission\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Investment App",
  "enabled": 1,
  "modified": "2024-09-18 13:43:28.333007",
  "module": "Loan and Investment App",
  "name": "work flow",
  "script": "frappe.ui.form.on('Investment App', {\r\n    refresh: function(frm) {\r\n        // A flag to check if the form has already been reloaded\r\n        if (frm.doc.__is_reload_done) {\r\n            return;  // Exit if the form has already been reloaded\r\n        }\r\n\r\n        // Check if transaction_type is already set\r\n        if (frm.doc.transaction_type) {\r\n            let workflow_name = 'Investment App (Request for Payment) Workflow';\r\n            let is_active = frm.doc.transaction_type === 'Request for Payments' ? 1 : 0;  // Set is_active based on transaction_type\r\n\r\n            // Call the Python function to update the workflow's is_active status\r\n            frappe.call({\r\n                method: 'loan_investment_app.custom_api.workflow.update_workflow_to_active',\r\n                args: {\r\n                    workflow_name: workflow_name,\r\n                    is_active: is_active\r\n                },\r\n                callback: function(response) {\r\n                    // Check the response to see if the workflow was updated\r\n                    if (response.message) {\r\n                        frappe.msgprint(response.message);\r\n                    }\r\n\r\n                    // Save the document after updating the workflow\r\n                    frm.save().then(() => {\r\n                        // Set the flag to indicate the form has been reloaded\r\n                        frm.doc.__is_reload_done = true;\r\n\r\n                        // No need to reload the document here\r\n                        // frm.reload_doc(); // Removed this line to avoid reloading\r\n                    }).catch((error) => {\r\n                        // Handle any errors that occur during the save\r\n                        frappe.msgprint(__('Error saving document: ' + error));\r\n                    });\r\n                },\r\n                error: function(error) {\r\n                    frappe.msgprint(__('An error occurred: ' + error));\r\n                }\r\n            });\r\n        } else {\r\n            // If transaction_type is not set, inform the user\r\n            frappe.msgprint(__('Transaction type is not set. Please select a transaction type.'));\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Investment App",
  "enabled": 1,
  "modified": "2024-09-18 13:27:10.826276",
  "module": "Loan and Investment App",
  "name": "INwords invest app",
  "script": "frappe.ui.form.on('Investment App', {\r\n    refresh(frm) {\r\n         // Only update the amount_in_words if it's not already set\r\n        const amount = frm.doc.amount; // Get the amount from the form\r\n        if (amount && !frm.doc.amount_in_words) { // Check if 'amount_in_words' is empty\r\n            frm.set_value('amount_in_words', formatAmount(amount));\r\n        }\r\n    }\r\n});\r\n\r\n// Function to convert number to words\r\nfunction numberToWords(num) {\r\n    const ones = [\r\n        \"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\",\r\n        \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\",\r\n        \"Seventeen\", \"Eighteen\", \"Nineteen\"\r\n    ];\r\n    const tens = [\r\n        \"\", \"\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"\r\n    ];\r\n    const thousands = [\r\n        \"\", \"Thousand\", \"Million\", \"Billion\"\r\n    ];\r\n\r\n    if (num === 0) return \"Zero\";\r\n\r\n    let word = \"\";\r\n    let i = 0;\r\n\r\n    while (num > 0) {\r\n        const chunk = num % 1000;\r\n        if (chunk > 0) {\r\n            const chunkWord = convertChunk(chunk);\r\n            word = chunkWord + (thousands[i] ? \" \" + thousands[i] : \"\") + \" \" + word;\r\n        }\r\n        num = Math.floor(num / 1000);\r\n        i++;\r\n    }\r\n\r\n    return word.trim();\r\n\r\n    function convertChunk(num) {\r\n        let chunkWord = \"\";\r\n\r\n        if (num > 99) {\r\n            chunkWord += ones[Math.floor(num / 100)] + \" Hundred \";\r\n            num %= 100;\r\n        }\r\n        if (num > 19) {\r\n            chunkWord += tens[Math.floor(num / 10)] + \" \";\r\n            num %= 10;\r\n        }\r\n        if (num > 0) {\r\n            chunkWord += ones[num] + \" \";\r\n        }\r\n\r\n        return chunkWord.trim();\r\n    }\r\n}\r\n\r\n// Function to format amount as currency\r\nfunction formatAmount(amount) {\r\n    const formattedAmount = \"\u20a6\" + amount.toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    const amountInWords = numberToWords(Math.floor(amount));\r\n    return `${formattedAmount} (${amountInWords} Naira Only)`;\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Investment App",
  "enabled": 1,
  "modified": "2024-09-20 18:30:23.729668",
  "module": "Loan and Investment App",
  "name": "withhold tax",
  "script": "frappe.ui.form.on('Investment App', {\r\n    refresh(frm) {\r\n        // If percent_amount already has a value during form refresh, and withhold_tax is not set, set withhold_tax\r\n        if (frm.doc.percent_amount && !frm.doc.withhold_tax) { \r\n            let withhold_tax = frm.doc.percent_amount * 0.10;\r\n            frm.set_value('withhold_tax', withhold_tax);\r\n        }\r\n    },\r\n\r\n    percent_amount(frm) {\r\n        // Whenever percent_amount changes, calculate 10% and set it in withhold_tax\r\n        if (frm.doc.percent_amount) {\r\n            let withhold_tax = frm.doc.percent_amount * 0.10;\r\n            frm.set_value('withhold_tax', withhold_tax);\r\n        }\r\n    },\r\n\r\n});\r\n\r\n\r\n",
  "view": "Form"
 }
]